# frozen_string_literal: true

##############################################################
## DO NOT EDIT THIS FILE                                    ##
## Use /etc/puppetlabs/bolt-server/conf.d/bolt-server.conf  ##
## to configure the sinatra server                          ##
##############################################################

require 'bolt_ext/server'
require 'bolt_ext/server_config'
require 'bolt/logger'
require 'rails/auth/rack'

Bolt::Logger.initialize_logging

config = if ENV['RACK_ENV'] == 'test'
           TransportConfig.new(File.join(__FILE__, 'spec', 'fixtures', 'configs', 'emptyconfig'))
         else
           TransportConfig.new
         end

Logging.logger[:root].add_appenders Logging.appenders.stderr(
  'console',
  layout: Bolt::Logger.default_layout,
  level: config.loglevel
)

if config.logfile
  stdout_redirect config.logfile, config.logfile, true
end

bind_addr = +"ssl://#{config.host}:#{config.port}?"
bind_addr << "cert=#{config.ssl_cert}"
bind_addr << "&key=#{config.ssl_key}"
bind_addr << "&ca=#{config.ssl_ca_cert}"
bind_addr << "&verify_mode=force_peer"
bind bind_addr

impl = TransportAPI.new
unless config.whitelist.nil?
  acls = []
  config.whitelist.each do |entry|
    acls << {
      'resources' => [
        {
          'method' => 'ALL',
          'path' => '/.*'
        }
      ],
      'allow_x509_subject' => {
        'cn' => entry
      }
    }
  end
  acl = Rails::Auth::ACL.new(acls, matchers: { allow_x509_subject: Rails::Auth::X509::Matcher })
  impl = Rails::Auth::ACL::Middleware.new(impl, acl: acl)
  impl = Rails::Auth::X509::Middleware.new(impl,
                                           ca_file: config.ssl_ca_cert,
                                           cert_filters: { 'puma.peercert' => proc { |x| x } },
                                           require_cert: true)
end

app impl
